{"version":3,"sources":["Travel.js","travel-db.js","Travels.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Travel","_ref","destination","country","image","distance","react_default","a","createElement","src","alt","myTravels","id","photo","Travels","map","travelItem","src_Travel","key","App","className","logo","role","aria-label","src_Travels","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAceA,SAVA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,QAASC,EAAxBH,EAAwBG,MAAOC,EAA/BJ,EAA+BI,SAA/B,OACXC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQM,IAAKR,IACvBI,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,UAAKL,EAAL,KAAgBD,GAChBI,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,oBCgCGM,EAvCG,CAChB,CACIC,GAAI,EACJC,MAAQ,mFACRX,YAAc,UACdC,QAAU,YACVE,SAAW,cAEf,CACIO,GAAI,EACJC,MAAQ,4FACRX,YAAc,aACdC,QAAU,YACVE,SAAW,aAEf,CACIO,GAAI,EACJC,MAAQ,sFACRX,YAAc,YACdC,QAAU,aACVE,SAAW,cAEf,CACIO,GAAK,EACLC,MAAQ,yEACRX,YAAc,YACdC,QAAU,eACVE,SAAW,aAEf,CACIO,GAAK,EACLC,MAAQ,2FACRX,YAAc,YACdC,QAAU,SACVE,SAAW,cCNFS,EAxBC,kBACZR,EAAAC,EAAAC,cAAA,WAWKG,EAAUI,IAAI,SAACC,GAAD,OAEXV,EAAAC,EAAAC,cAACS,EAAD,CAAQC,IAAKF,EAAWJ,GACpBR,MAAOY,EAAWH,MAClBX,YAAac,EAAWd,YACxBC,QAASa,EAAWb,QACpBE,SAAUW,EAAWX,eCFtBc,mLAZX,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAChBd,EAAAC,EAAAC,cAAA,OAAKC,IAAKY,IAAMD,UAAU,WAAWV,IAAI,SACzCJ,EAAAC,EAAAC,cAAA,MAAIY,UAAU,aAAd,+BAAsDd,EAAAC,EAAAC,cAAA,QAAMc,KAAK,MAAMC,aAAW,SAA5B,8BAEtDjB,EAAAC,EAAAC,cAACgB,EAAD,cARQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.77f3f7e5.chunk.js","sourcesContent":["// Travel is a resuable component that displays the content of one travel\r\n\r\nimport React from \"react\";\r\n\r\nconst Travel = ({destination, country, image, distance}) => (\r\n    <figure>\r\n        <img src={image}  alt={destination} />\r\n        <figcaption>\r\n            <h2>{country}, {destination}</h2>\r\n            <p>{distance} from Berlin</p>\r\n        </figcaption>\r\n    </figure>\r\n);\r\n\r\nexport default Travel;","// The list of travelItems\r\n\r\nconst myTravels = [\r\n  {\r\n      id: 0,\r\n      photo : \"https://www.carigami.fr/magazine/wp-content/uploads/2014/09/sydney-australie.jpg\",\r\n      destination : \" Syndey\",\r\n      country : \"Australia\",\r\n      distance : \"16 084 km \" ,  \r\n  },\r\n  {\r\n      id: 1,\r\n      photo : \"https://upload.wikimedia.org/wikipedia/commons/f/f2/Merlion_and_the_Singapore_Skyline.JPG\",\r\n      destination : \" Singapore\",\r\n      country : \"Singapore\",\r\n      distance : \"9 900 km \",\r\n  },\r\n  {\r\n      id: 2,\r\n      photo : \"https://upload.wikimedia.org/wikipedia/commons/8/83/Harbour_Bridge_from_Chelsea.JPG\",\r\n      destination : \" Auckland\",\r\n      country : \"New Zeland\",\r\n      distance : \"17 500 km \",\r\n  },\r\n  {\r\n      id : 3,\r\n      photo : \"https://upload.wikimedia.org/wikipedia/commons/b/b6/GrooteKerk_001.jpg\",\r\n      destination : \" Pretoria\",\r\n      country : \"South Africa\",\r\n      distance : \"8 800 km \",\r\n  },\r\n  {\r\n      id : 4,\r\n      photo : \"https://upload.wikimedia.org/wikipedia/commons/f/f9/CentrevilleMontreal%C3%A9t%C3%A9.jpg\",\r\n      destination : \" Montreal\",\r\n      country : \"Canada\",\r\n      distance : \"6 000 km \",\r\n  }\r\n];\r\n\r\n\r\nexport default myTravels;","//Travels is a component that loop over the list of travelItems\r\n\r\nimport React from \"react\";\r\nimport Travel from \"./Travel\";\r\nimport myTravels from \"./travel-db\"; \r\n\r\nconst Travels = () => (\r\n    <div>\r\n        {/* Using keys with index */}\r\n        {/*myTravels.map((travelItem, index) => (\r\n            <Travel key={index}\r\n                photo={travelItem.photo}\r\n                destination={travelItem.destination}\r\n                country={travelItem.country}\r\n                distance={travelItem.country}\r\n            />   \r\n        ))*/}\r\n         {/* Using keys with id */}\r\n        {myTravels.map((travelItem) => (\r\n            // <Travel key=\"travelItem.id\" {...travelItem} />\r\n            <Travel key={travelItem.id} \r\n                image={travelItem.photo}\r\n                destination={travelItem.destination}\r\n                country={travelItem.country}\r\n                distance={travelItem.distance}\r\n            />   \r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Travels;\r\n\r\n\r\n\r\n\r\n\r\n// Those 3 functions are the same: \r\n\r\n// [10, 11, 12, 13].map(function(item, index) {\r\n//     return item + 1;\r\n// })  // [ 11, 12, 13, 14 ]\r\n\r\n// [10, 11, 12, 13].map((item, index) => item + 1)\r\n\r\n// [10, 11, 12, 13].map(item => item + 1)\r\n","// App is the entry component\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Travels from \"./Travels\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className='App-title'>Dreaming of my next Travels <span role=\"img\" aria-label=\"emoji\">💭😍</span></h1>\n          </header>\n          <Travels/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}